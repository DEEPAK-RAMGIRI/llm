prompt,response
tell me about deepak,"Deepak Ramgiri is a final-year Computer Science student at SR University, with a strong academic record and a CGPA above 9.3. He is skilled in programming languages like Python, Java, and C, and also builds modern websites using HTML, CSS, JavaScript, and React.js. he uses tools like Git, GitHub, Dialogflow, and cloud platforms to manage and deploy his projects. Deepak enjoys learning new technologies and building projects that solve real problems. You can explore more about his work at deepakaramgiri.tech."
tell me about foodies,"Foodies: A Hotel Online Restaurant is a modern, single-page restaurant website built using React.js. It features a responsive design that works smoothly across all devices. A chatbot powered by Dialogflow is integrated to handle common user queries like placing orders or checking the menu. The site includes animated sections for pages like Home, Menu, and Contact, with dynamic text effects using Typed.js to enhance engagement. It’s deployed on Vercel with fast load times and high uptime, and the entire project is managed through GitHub for organized version control."
hi how did deepak made you,"The project implements a question-answering system where user inputs are converted into vector embeddings using Hugging Face models. The reference data is stored in a CSV file, which is loaded using CSVLoader from langchain_community.document_loaders. This data is embedded using Instructor Embeddings and stored in ChromaDB to enable fast and efficient similarity search.When a user submits a query, it is transformed into a vector and compared with the vectors stored in ChromaDB. The most relevant information is retrieved using LangChain's RetrievalQA module. The results are passed to Gemini GPT Flash, an LLM integrated via PromptTemplate, to generate accurate responses, even for multi-question inputs. Environment variables are used to securely manage API keys and sensitive credentials."
tell me about song recommendation sysytem,"A content-based music recommendation system was developed to suggest songs based on their lyrics. The system handled over 20,000 songs, with lyrics cleaned using text preprocessing techniques like tokenization and stemming. The lyrics were then converted into numerical form using TF-IDF vectorization, allowing the system to understand and compare song content. Cosine similarity was used to find songs with similar meanings, resulting in personalized recommendations with over 85% accuracy. The entire process was executed efficiently in Google Colab using tools like NLTK and scikit-learn."
what are the skills does deepak have ?,"Skilled in Python, Java, and C for programming, and experienced in building websites using HTML, CSS, JavaScript, and React.js. Worked with tools like Git, GitHub, and Vercel for version control and deployment. Has hands-on experience in NLP and AI, including TF-IDF, embeddings, cosine similarity, and chatbot development using Dialogflow. Familiar with LangChain, ChromaDB, and building smart recommendation systems. Also comfortable with Google Colab, CSV data handling, and deploying full projects online."
what  are the technologies used in your portfolio,"The portfolio was built using React.js along with HTML, CSS, and JavaScript for a smooth and responsive interface. It includes Typed.js for animated text and is deployed using Vercel. A custom AI assistant is integrated using Hugging Face embeddings, LangChain, ChromaDB, and Gemini GPT Flash, allowing visitors to ask questions about projects. Tools like Google Colab, NLTK, and TF-IDF were used for text processing and testing. The setup is secured using .env files, with all work managed through Git and GitHub."
what are the difficulties faced and whata are the learnings I learned from this foodies project,"While building the Foodies website, a functionality issue was encountered where some buttons were not triggering correctly. By using the React Developer Tools, the issue was identified and fixed. Through this, an important concept in React was learned—how to trigger specific functions based on user interactions, which played a key role in smoothly connecting the chatbot to the website.

To make the chatbot smarter, multiple intents were created in bulk so it could understand different types of user queries—a process known as intent classification. For example, if a user says “onigiri” or “rice ball,” the bot recognizes both as the same food item by using entities with synonyms.

A database was also set up to manage menu items, pricing, and order tracking. The chatbot, built with Dialogflow, was connected to this database using FastAPI in Python. Since Dialogflow only works over secure connections, Ngrok was used to tunnel the local development server into a secure HTTPS endpoint.

Another major challenge was managing multiple users using the chatbot at the same time, which could cause data conflicts. This was solved by using Dialogflow’s session IDs combined with regular expressions, allowing each user's session to be handled separately without confusion."
difficulties and learnings from this llm ,"While building the custom LLM, several challenges came up:
Dependency Issues: Even after installing the right packages, some were either outdated or too new, leading to errors. Everything worked fine in Google Colab, but running it locally in Python caused problems. This was solved by learning to set up a virtual environment.

Data Preparation: Creating a large amount of personal data (like project details and chatbot inputs) manually was time-consuming and repetitive.

API Management: Managing sensitive keys was tricky at first, but a valuable new concept learned was using .env files to safely store API keys and keep them secure.
"
